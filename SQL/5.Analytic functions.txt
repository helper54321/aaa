Ez a 2 sor csak bemutató, hogy így is lehet, de a lentebbi megoldás a javasolt.
select b.*, (select count(*) from bricks where colour = b.colour) as total from bricks b;
select b.*, (select sum(weight) from bricks where colour = b.colour) as total from bricks b;

select b.*, count(*) over(partition by colour) total from bricks b; //Ugyanaz mint a fentebbi, de így szebb. Az over és partitiob by jelentése, hogy a megadott mező értéke szerint szétbontja a táblát (lényegében mint a group by), így ami műveletet megadunk előtte, az a szétbontott résztáblákra vonatkozik
select b.*, sum(weight) over(partition by colour) total from bricks b;
select b.*, sum(weight) over(partition by shape) total from bricks b;
select b.*, sum(weight) over(partition by shape), sum(weight) over(partition by colour) from bricks b; //2féle módon is szétbont (természetesen nem csak sum-al lehetséges használni, hanem bármilyen grouping functionnal)
select b.*, count(*) over (order by brick_id) running_total, sum (weight) over (order by brick_id) running_weight from  bricks b; //Id-nként sorba haladva adja össze a súlyokat (itt order by van, nem partition by)
select b.*, sum (weight) over (partition by colour order by brick_id) running_weight from  bricks b; //Partition by-al színenként adja össze az összeget, anélkül az összesítettet
select b.*, sum (weight) over (partition by colour order by brick_id desc) running_weight from  bricks b order by weight desc; //A partition by melletti order by csak azt mondja meg, hogy miután előálltak a szétbontott csoportok, milyen sorrendben végezze el rajtuk az adott műveletet (itt a sum-ot), ebben az esetben id szerint csökkenően, tehát ebben az esetben a red colorhoz tartozó id-k 3,4 és 5. De mivel úgy adtuk meg, így 5,4,3 id-jű sorrendben adja össze a súlyokat

select b.*, sum (weight) over (order by weight) running_weight from  bricks b order by weight; //Nem jó! Mivel egy olyan mező szerint csináljuk az order by-t, amiben lehetnek (és vannak is duplicate value-k) (részletes magyarázat az analytic function mappa 3. videójában, 1 sorral lentebb pedig a megoldás)
select b.*, sum (weight) over (order by weight rows between unbounded preceding and current row) running_weight from  bricks b order by weight; //A "rows between unbounded preceding and current row" résszel kiegészítve biztonságosan használhatjuk az order by-t olyan mezőnek, ahol vannak duplicate-k.
select b.*, sum (weight) over (order by weight rows between 2 preceding and current row) running_weight from  bricks b order by weight; //Az adott sorban lévő súlyt, és a felette lévő 2 sorban lévőt adja össze (csak, minden esetben, tehát az előtte és utána lévőkkel nem is foglalkozik) (természetesen ha a 2-es számot átírjuk, akkor annyira fogja amennyit megadunk)
select * from (select b.*, count(*) over (partition by colour) colour_count from bricks b) where  colour_count >= 2; //Így tudunk szűrni, over és partition by esetén (ebben a példában csak azokból adja vissza amelyik színekből legalább 2 van) (azért adtunk neki aliast, hogy elérjük kívülről)

select brick_id, weight, 
       row_number() over ( order by weight ) rn, //Hányadik sor (a rendezett formában, mivel használtuk az order by-t)
       rank() over ( order by weight ) rk, //A rendezett táblában minden súlyhoz hozzárendel egy rankot. Ismétlődő értékek esetén az összes ugyanazt a rankot kapja, egészen addig amíg nem jön egy új érték. Az új érték értéke ekkor a row-number értéke lesz (tehát rések vannak a rankok között)
       dense_rank() over ( order by weight ) dr //Ugyanaz mint a rank, csak itt az új érték esetén csak 1-el növelődik a rank értéke
from   bricks;

Ritkán használatosak, de lehetnek olyan estek amikor jól jönnek:
select b.*,
       lag ( shape ) over ( order by brick_id ) prev_shape, //A rendezett táblában az előző shape értéket tartalmazza (mert azt adtuk meg). Nyílván a legelsőnél null lesz, mert annak nincs előzője.
       lead ( shape ) over ( order by brick_id ) next_shape //A lag-gal ellentétben ez a következőt tartalmazza. Itt pedig a legutolsó lesz null, mert annál nincs következő
from   bricks b;

select b.*,
       first_value ( weight ) over ( //A legelső weight érték a rendezett táblában
         order by brick_id 
       ) first_weight_by_id,
       last_value ( weight ) over ( //A legutolsó weight érték a rendezett táblában. FONTOS: csak az adott sorral bezórlag az utolsó, tehát ha pl a 4. sor esetén nézzük, akkor itt még azt se tudja hogy amögött mik vannak.
         order by brick_id 
       ) last_weight_by_id
from   bricks b;


//Ugyanaz mint a fentebbu, de kiegészítve a range-s résszel, aminek hatására nem csak az adott sorig bezárólag adja vissza a legutolsót. Tehát így ténylegesen a tábla legutolsó elemét tartalmazza minden sorban:
select b.*,
       first_value ( weight ) over ( 
         order by brick_id 
       ) first_weight_by_id,
       last_value ( weight ) over ( 
         order by brick_id 
         range between current row and unbounded following
       ) last_weight_by_id
from   bricks b;
